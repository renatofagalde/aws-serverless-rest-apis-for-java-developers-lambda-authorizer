openapi: "3.0.1"
info:
  title: "lambda-authorizer"
  version: "1.0"
servers:
  - url: "https://6bjykgdze0.execute-api.us-east-1.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "dev"
paths:
  /users/{user_name}:
    get:
      parameters:
        - name: "user_name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      security:
        - authorizer-token-44: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:012821307542:function:lambda-authorizer-GetUserByUsernameHandlerFunction-WrgB7LBnC7Ms/invocations"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
components:
  securitySchemes:
    authorizer-token-44:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:012821307542:function:lambda-authorizer-LambdaAuthorizerFunction-0PjEYwR23HQ5/invocations"
        authorizerResultTtlInSeconds: 0
        identitySource: "method.request.header.Authorization"
        type: "request"
x-amazon-apigateway-request-validators:
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false